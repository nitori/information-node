#!/usr/bin/env python3

'''
information-node - an advanced tool for data synchronization
Copyright (C) 2015  Information Node Development Team (see AUTHORS.md)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.


In addition, as a special exception, the copyright holders give
  permission to link the code of portions of this program with the
  OpenSSL library under certain conditions as described in each
  individual source file, and distribute linked combinations
  including the two.
You must obey the GNU General Public License in all respects
  for all of the code used other than OpenSSL.  If you modify
  file(s) with this exception, you may extend this exception to your
  version of the file(s), but you are not obligated to do so.  If you
  do not wish to do so, delete this exception statement from your
  version.  If you delete this exception statement from all source
  files in the program, then also delete it here.

'''

""" This executable provides a graphical viewer that can open up information
    nodes and show/browse the contents. This is the standard tool you would
    usually want to use for casual use. (the other provided tools are mainly
    for  advanced or automated command line management)
"""

import argparse
import logging
import os
import platform
import sys
import textwrap

parser = argparse.ArgumentParser(description=\
    textwrap.dedent('''\
    Graphical viewer to access information node data.
    This tool is free software. "+\
    "See LICENSE.txt for license and warranty information.
    ''').strip().replace("\n", " ").replace("  ", " "))
parser.add_argument("--debug-history",
    default=False, action="store_true", dest="debug_history",
    help="keep an in-memory history of recently issued commands " +\
        "for debugging purposes (Viewer Activity Log)")
parser.add_argument("-v", "--verbose",
    default=False, action="store_true", dest="verbose",
    help="print out more verbose debugging output of activities")

if __name__ == "__main__":
    args = parser.parse_args()

    if args.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.WARNING)

    # check whether gtk is present:
    gtk_available = True
    try:
        from gi.repository import Gtk
    except ImportError:
        gtk_available = False

    if not gtk_available:
        try:
            import tkinter
        except ImportError:
            print("FATAL ERROR: *** tkinter missing. ***", file=sys.stderr)
            sys.exit(1)
        import tkinter.messagebox as tkMessageBox
        if platform.system().lower() == "windows":
            # display notice and install it
            root = tkinter.Tk()
            root.withdraw()
            tkMessageBox.showinfo("IMPORTANT",
                textwrap.dedent('''\
                
                *** IMPORTANT PLEASE READ ***
                
                GTK+3 missing.
                
                Dear user,
                
                you are almost done running the information node viewer!
                However, you will need to install GTK+3 first.
                
                1. Download PyGObject/GTK3 from here: https://wiki.gnome.org/PyGObject (pick "Windows installers with Gtk3 support" and then the newest version)
                
                2. During install, click "Add Path" and enter this location:
                    -> ''') + os.path.dirname(sys.executable) + "\n" + \
                textwrap.dedent('''\
                
                3. During install, when shown the packages choices,
                   make sure to check GTK+3
                   
                4. When you are done, launch the viewer again.'''))
            sys.exit(1)
        else:
            # display notice and install it
            root = tkinter.Tk()
            root.withdraw()
            tkMessageBox.showinfo("Error",
                textwrap.dedent('''\
                GTK+3/PyGObject is missing. Please install it.
                '''))
            sys.exit(1)    
            
    # check whether PyCrypto is present:
    pycrypto_available = True
    try:
        from Crypto.PublicKey import RSA
    except ImportError:
        pycrypto_available = False

    if not pycrypto_available:
        try:
            import tkinter
        except ImportError:
            print("FATAL ERROR: *** tkinter missing. ***", file=sys.stderr)
            sys.exit(1)
        import tkinter.messagebox as tkMessageBox
        if platform.system().lower() == "windows":
            # display notice and install it
            root = tkinter.Tk()
            root.withdraw()
            tkMessageBox.showinfo("IMPORTANT",
                textwrap.dedent('''\
                
                *** IMPORTANT PLEASE READ ***
                
                PyCrypto missing.
                
                Dear user,
                
                you are almost done running the information node viewer!
                However, you will need to install PyCrypto first.
                
                1. Download PyCrypto from here: http://www.voidspace.org.uk/python/modules.shtml#pycrypto
                (on the site, make sure to pick latest version)
                
                2. Pick the download for amd64 and this python version:
                    -> ''') + sys.version + "\n" + \
                textwrap.dedent('''\
                
                3. During install, pick the python with this "Python Directory":
                    -> ''') + os.path.dirname(sys.executable) + "\n" + \
                textwrap.dedent('''\
                
                4. When you are done, launch the viewer again.'''))
            sys.exit(1)
        else:
            # display notice and install it
            root = tkinter.Tk()
            root.withdraw()
            tkMessageBox.showinfo("Error",
                textwrap.dedent('''\
                PyCrypto is missing. Please install it.
                '''))
            sys.exit(1)  

    from informationnode.uilib import uilib_main_loop, uilib_quit
    from informationnode.client.ui.nodewindow import NodeWindow
    from informationnode.client.api.nodeactions import NodeActions

    class App(object):
        def __init__(self, keep_history=False):
            self.windows = []
            self.actions = NodeActions(self, keep_history=keep_history)

        def window_close_event(self, win):
            self.windows.remove(win)
            if len(self.windows) == 0:
                uilib_quit()

        def add_window(self, win):
            win.register("close", self.window_close_event)
            self.windows.append(win)
            win.show()
            return win

        def add_node_window(self, node_path):
            new_window = NodeWindow(self, node_path)
            return self.add_window(new_window)

        def run(self):
            self.add_node_window(None)
            uilib_main_loop()

    app = App(keep_history=args.debug_history)
    app.run()

