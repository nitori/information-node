#!/usr/bin/env python3

'''
information-node - an advanced tool for data synchronization
Copyright (C) 2015  information-node Development Team (see AUTHORS.md)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''

import argparse
from informationnode.helper import check_if_node_dir, check_if_node_runs
from informationnode.helper import get_api_socket_for_node
from informationnode.helper import DoubleLineBreakFormatter
import json
import logging
import os
import platform
import selectors
import sys
import textwrap

parser = argparse.ArgumentParser(description=\
    "Command line tool to manage existing information nodes. "+\
    "This tool is free software. "+\
    "See LICENSE.txt for license and warranty information.",
    formatter_class=DoubleLineBreakFormatter)

action_info_list = [
    ("raw-cmd", "<node-folder>",
    "send the raw JSON-formatted command from stdin to the node " +\
        "and print the response",
    textwrap.dedent('''\
    Send the given raw command in JSON format to the given node's data server.
    Afterwards, print the node's response (also JSON) on stdout.
    
    This can be useful if you want to access the node api through an
    automated script.
    ''')),
]

# make a nice access dictionary of the action info:
action_info = {}
for action in action_info_list:
    action_info[action[0]] = (action[0], action[1], action[2], action[3])

def get_action_overall_help_text():
    text = "Specify one of those possible actions to be executed:"
    for action in action_info_list:
        text += "\n\n[b]\"" + action[0] + "\" " + action[1] +\
            "[/b] - " +\
            action[2] + ("." if (not action[2].endswith(".") and \
                not action[2].endswith("!") and \
                not action[2].endswith("?")) else "") + \
            " For " +\
            "more details, try: ./inode-viewer-cli " + str(action[0]) +\
            " --help"
    return text

parser.add_argument("action",
    help=get_action_overall_help_text())
parser.add_argument("--json", default=False,
    action="store_true",
    help="return the output formatted as JSON instead of plain " +\
        "human readable text as most commands do per default")
parser.add_argument("argument", nargs="*",
    help="argument(s) to given action as specified above")

# display usage if there are literally no arguments at all:
if len(" ".join(sys.argv[1:]).strip()) == 0:
    parser.print_usage()
    sys.exit(1)

# extract all arguments not meant for a subcommand:
main_args = []
subcmd_args = []
for arg in sys.argv[1:]:
    if not arg.startswith("-"):
        main_args.append(arg)
        subcmd_args = sys.argv[1 + len(main_args):]
        break
    main_args.append(arg)
args = parser.parse_args(main_args)

if args.action == "raw-cmd":
    subparser = argparse.ArgumentParser(prog=\
        os.path.basename(sys.argv[0]) + " raw-cmd", description=\
        action_info["raw-cmd"][3],
        formatter_class=DoubleLineBreakFormatter)
    subparser.add_argument("node-folder",
        help="the node to which this command should be sent")
    subparser.add_argument("--bytes", default="-1",
        help="the size of the input JSON you will provide in "+\
        "exact bytes. Providing this speeds up input processing " +\
        "for large inputs considerably.")
    args = subparser.parse_args(subcmd_args)
    setattr(args, "node_folder", getattr(args, "node-folder"))

    # get input bytes length if specified:
    try:
        input_bytes = int(args.bytes)
    except ValueError:
        print("inode-viewer-cli: error: --bytes needs to be an integer",
            file=sys.stderr)
        sys.exit(1)
    if input_bytes < -1 or input_bytes == 0:
        print("inode-viewer-cli: error: input length in bytes needs "+\
            "to be positive number", file=sys.stderr)
        sys.exit(1)

    # get api socket for the node:
    (result, socket) = get_api_socket_for_node(args.node_folder)
    if not result:
        # whoops, didn't work.
        print("inode-viewer-cli: error: " + socket, file=sys.stderr)
        sys.exit(1)
    
    # read JSON input from command line:
    if input_bytes == -1:
        # Supecial case where we don't know the input length.
        # We need to periodically check if what we already got is valid
        # complete JSON.
        if platform.system().lower() == "windows":
            print("inode-viewer-cli: error: raw-cmd without specified "+\
                "input byte length not supported on windows. " +\
                "Use --bytes")
            sys.exit(1)
        input_selector = selectors.DefaultSelector()
        input_selector.register(sys.stdin, EVENT_READ)
        input_data = ""
        while True:
            events = input_selector.select()
            for key, mask in events:
                try:
                    data = key.fileobj.read(1024)
                except OSError:
                    # end of stream or similar.
                    json_obj = json.loads(input_data)
                    break
                if len(data) == 0:
                    # end of stream.
                    json_obj = json.loads(input_data)
                    break
                input_data += data
                # see if this is already valid json:
                try:
                    json_obj = json.loads(input_data)
                    break
                except ValueError:
                    continue  # nope. continue parsing
        logging.debug("Parsed obj: " + str(json_obj))
else:
    if args.action in action_info:
        print("Dear user,")
        print("")
        print("This software is still \033[1mwork in progress\033[21m.\n"+\
            "Sadly, this action is \033[1mnot available yet\033[21m" +\
            " in this version.")
        print("")
        print("Best regards,\nThe developers")
        print("")
        print("inode-viewer-cli: error: action UNIMPLEMENTED: " + args.action,
            file=sys.stderr)
        sys.exit(1)
    print("inode-viewer-cli: error: unknown action: " + args.action,
        file=sys.stderr)


